CLOSURE | In inner function will have access to an outer
    function's memory space even if the execution context of
    the outer function has been popped off the execution stack.

function greet(whattosay) {

  return function(name) {
      console.log(whattosay + " " + name);
  }

}

// Calling a function inside a function
greet("Hi")("Ejerson");


// Saving a function call in a variable
var sayHi = greet("Hi");
sayHi("Ejerson");

the variable environment of a popped off execution context
doesn't immediately get garbage collected, which still allows
another code to access those values.

Any functions residing another function will still have
access to the memory space of its enclosing function.

It doesn't matter when a function is invoked, I don't
need to worry about the outer environment because javascript
is built so the memory space of a function's outer environment
is preserved. The javascript engine will ensure that whatever
function I am running, it will have access to the outer variable it
suppose to have access to.


function buildFunctions() {

    var arr = [];

    for (var i = 0; i < 3; i++) {

        arr.push(function() {
                console.log(i);
            });
    }

    return arr;
}

// i = 3, arr[f0, f1, f2];

var fs = buildFunctions;
fs[0](); // 3
fs[1](); // 3
fs[2](); // 3

The results are 3 in all case because i is saved by value, so if
the value of i is changed, everything that refers to that value
will get that updated value.

************************************************************
ES6 Solution
function buildFunctions() {

    var arr = [];

    for (var i = 0; i < 3; i++) {

        // let lets one create a new memory space
        // for each individual variable, thus creating
        // a separately scoped variable.
        let j = i;

        arr.push(function() {
                console.log(j);
            });
    }

    return arr;
}

// i = 3, arr[f0, f1, f2];

var fs = buildFunctions;
fs[0](); // 3
fs[1](); // 3
fs[2](); // 3

************************************************************
ES5 Solution
function buildFunctions() {

    var arr = [];

    for (var i = 0; i < 3; i++) {

        arr.push(
            // this function is executed in each iteration
            (function(j) {
                // the value of j will be will be equal to i
                return function() {
                  console.log(j);
                }
            }(i))
        );
    }

    return arr;
}

// i = 3, arr[f0, f1, f2];

var fs = buildFunctions;
fs[0](); // 3
fs[1](); // 3
fs[2](); // 3
