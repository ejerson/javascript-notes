FUNCTION
  code
  name
  call()
  apply()
  bind()

var person = {

    firstName: "John",
    lastName: "Doe",
    getFullName: function() {

        var fullName = this.firstName + " " + this.lastName;
        return fullName;

    }
}


var logName = function(lang1, lang2) {

    // this keyword in here will point to the global Object
    // getFullName is undefined in this context
    console.log('Logged: ' + this.getFullName());
}

logName();

********************* BIND()

// .bind returns a function, it makes a copy of logName.
// (object) .bind accepts an object to bind a function to.
var logPersonName = logName.bind(person);

logPersonName(); // this will refer to the person object.

OR

var logName = function(lang1, lang2) {
    console.log('Logged: ' + this.getFullName());
}.bind(person);

logName();


********************* CALL()
methodname.call(object/reference, ...parameters)
logName.call(person, "en", "es");

********************* APPLY()
methodname.call(object/reference, [array of parameters])
logName.call(person, ["en", "es"]);

// function expression
(function(lang1, lang2) {
    console.log('Logged: ' + this.getFullName());
}).apply(person, ["en", "es"]);


******************* FUNCTION BORROWING
// I'm setting the 'this' keyword inside the person Object
// to point to the this keywor inside person2
person.getFullName.apply(person2); // Jane Doe

******************* FUNCTION CURRYING
function multiply(a, b) {
    return a * b;
}

// (this, 2) sets the variable a permanently to 2
var multipleByTwo = multiply.bind(this, 2);
// (this, 2) sets the variable a permanently to 3 and b to 4
var multipleByPermanently = multiply.bind(this, 3, 4);

multiplyByTwo(4); // (a = 2, b = 4) = 8
